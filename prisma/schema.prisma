generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  tokens            Int                @default(1000)
  accountType       AccountType        @default(FREE)
  planExpiresAt     DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  accounts          Account[]
  generatedImages   GeneratedImage[]
  payments          Payment[]
  scheduledPosts    ScheduledPost[]
  sessions          Session[]
  socialConnections SocialConnection[]
  templateUnlocks   TemplateUnlock[]
  tokenTransactions TokenTransaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Template {
  id              String           @id @default(cuid())
  title           String
  description     String
  prompt          String
  style           String
  platform        String
  tags            String[]
  cost            Int              @default(0)
  unlockCost      Int              @default(100)
  category        String
  type            TemplateType     @default(GENERATE)
  requiresUpload  Boolean          @default(false)
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  generatedImages GeneratedImage[]
  templateUnlocks TemplateUnlock[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String
  icon        String
  color       String
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TemplateUnlock {
  id         String   @id @default(cuid())
  userId     String
  templateId String
  unlockedAt DateTime @default(now())
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
}

model GeneratedImage {
  id               String    @id @default(cuid())
  userId           String
  templateId       String?
  imageUrl         String
  originalImageUrl String?
  prompt           String
  caption          String?
  style            String?
  size             String    @default("1024x1024")
  platform         String?
  quality          String?
  isFavorite       Boolean   @default(false)
  downloads        Int       @default(0)
  isPublic         Boolean   @default(false)
  suggestionId     String?
  generationSource String?
  createdAt        DateTime  @default(now())
  template         Template? @relation(fields: [templateId], references: [id])
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TokenTransaction {
  id          String               @id @default(cuid())
  userId      String
  amount      Int
  type        TokenTransactionType
  description String?
  createdAt   DateTime             @default(now())
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ScheduledPost {
  id          String              @id @default(cuid())
  userId      String
  imageUrl    String
  prompt      String?
  caption     String?
  style       String?
  platform    String
  scheduledAt DateTime
  status      ScheduledPostStatus @default(PENDING)
  publishedAt DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialConnection {
  id           String    @id @default(cuid())
  userId       String
  platform     String
  platformId   String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  orderCode       String        @unique
  packageType     String
  tokens          Int
  amount          Int
  originalAmount  Int?
  discountPercent Int?
  accountUpgrade  AccountType?
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  payosData       Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TokenTransactionType {
  EARNED
  PURCHASED
  USED
  ADJUSTMENT
}

enum ScheduledPostStatus {
  PENDING
  PROCESSING
  PUBLISHED
  FAILED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  FAILED
}

enum AccountType {
  FREE
  CREATOR
  PRO
  PREMIUM
}

enum TemplateType {
  GENERATE
  TRANSFORM
}
